{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/disclaimer/disclaimer.component.css","webpack:///./src/app/disclaimer/disclaimer.component.html","webpack:///./src/app/disclaimer/disclaimer.component.ts","webpack:///./src/app/get-info.service.ts","webpack:///./src/app/index/index.component.css","webpack:///./src/app/index/index.component.html","webpack:///./src/app/index/index.component.ts","webpack:///./src/app/page-two/page-two.component.css","webpack:///./src/app/page-two/page-two.component.html","webpack:///./src/app/page-two/page-two.component.ts","webpack:///./src/app/search/search.component.css","webpack:///./src/app/search/search.component.html","webpack:///./src/app/search/search.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".example-fill-remaining-space {\\r\\n  /* This fills the remaining space, by using flexbox. \\r\\n     Every toolbar row uses a flexbox row layout. */\\r\\n  flex: 11 auto;\\r\\n}\\r\\n.mat-toolbar\\r\\n{\\r\\n  background-image: url('back.jpg');\\r\\n   \\r\\n}\\r\\n.container\\r\\n{\\r\\n  background-image: url('back.jpg');\\r\\n}\\r\\n.one{\\r\\nbackground-image: url('RecipeButton.jpg');\\r\\nbackground-size: cover;\\r\\nheight: 60%;\\r\\nwidth:15%;\\r\\nborder-radius: 25px;\\r\\nmargin-right:8.5%;\\r\\nmargin-left: 11%;\\r\\n}\\r\\n.two\\r\\n{\\r\\nbackground-image: url('AddRecipeButtonNew.jpg');\\r\\nbackground-size: cover;\\r\\nheight: 60%;\\r\\nwidth:15%;\\r\\nborder-radius: 25px;\\r\\nmargin-right:8%;\\r\\nmargin-left:8.5%;\\r\\n}\\r\\n.three\\r\\n{\\r\\nbackground-image: url('searchButtonNew.jpg');\\r\\nbackground-size: cover;\\r\\nheight: 60%;\\r\\nwidth:15%;\\r\\nborder-radius: 25px;\\r\\nmargin-right:8.5%;\\r\\nmargin-left:8.5%;\\r\\n}\\r\\n.toolbar\\r\\n{\\r\\n  height: 200px;\\r\\n}\\r\\n.h1\\r\\n{\\r\\n  color:wheat;\\r\\n  text-align: center;\\r\\n  font-family: Georgia, Helvetica, sans-serif;\\r\\n  font-weight: 900;\\r\\n  font-style: oblique;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <mat-toolbar class=\\\"toolbar\\\" color=\\\"primary\\\">\\r\\n        <!-- <span>Home Page</span> -->\\r\\n        <!-- This fills the remaining space of the current row -->\\r\\n        <button class=\\\"one\\\" mat-button [routerLink]=\\\"['/index']\\\" color=\\\"Warn\\\"></button>\\r\\n        <button class=\\\"two\\\" mat-button [routerLink]=\\\"['/pageTwo']\\\" color=\\\"Warn\\\"></button>\\r\\n        <button class=\\\"three\\\" mat-button [routerLink]=\\\"['/search']\\\" color=\\\"Warn\\\"></button>\\r\\n    </mat-toolbar>\\r\\n    <router-outlet></router-outlet>\\r\\n    <app-disclaimer></app-disclaimer>\\r\\n</div>\"","import { Component } from '@angular/core';\r\nimport { GetInfoService } from './get-info.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 'G00262708WebApp';\r\n}\r\n\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes} from '@angular/router';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { IndexComponent } from './index/index.component';\r\nimport { GetInfoService } from './get-info.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n//for viewing pleasure\r\nimport {\r\n  MatAutocompleteModule,\r\n  MatButtonModule,\r\n  MatButtonToggleModule,\r\n  MatCardModule,\r\n  MatCheckboxModule,\r\n  MatChipsModule,\r\n  MatCommonModule,\r\n  MatDatepickerModule,\r\n  MatDialogModule,\r\n  MatDividerModule,\r\n  MatExpansionModule,\r\n  MatFormFieldModule,\r\n  MatGridListModule,\r\n  MatIconModule,\r\n  MatInputModule,\r\n  MatLineModule,\r\n  MatListModule,\r\n  MatMenuModule,\r\n  MatNativeDateModule,\r\n  MatOptionModule,\r\n  MatPaginatorModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatPseudoCheckboxModule,\r\n  MatRadioModule,\r\n  MatRippleModule,\r\n  MatSelectModule,\r\n  MatSidenavModule,\r\n  MatSliderModule,\r\n  MatSlideToggleModule,\r\n  MatSnackBarModule,\r\n  MatSortModule,\r\n  MatStepperModule,\r\n  MatTableModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n  MatTooltipModule\r\n} from '@angular/material';\r\n//components\r\nimport { AppComponent } from './app.component';\r\nimport { PageTwoComponent } from './page-two/page-two.component';\r\nimport { SearchComponent } from './search/search.component';\r\nimport { DisclaimerComponent } from './disclaimer/disclaimer.component';\r\nconst appRoutes: Routes = [\r\n  {\r\n  path: 'index', component: IndexComponent,\r\n  },\r\n  {\r\n  path: 'pageTwo', component: PageTwoComponent\r\n  },\r\n  {\r\n  path: 'search', component: SearchComponent\r\n  }\r\n]\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    IndexComponent,\r\n    PageTwoComponent,\r\n    SearchComponent,\r\n    DisclaimerComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    HttpClientModule,\r\n    MatAutocompleteModule,\r\n    MatButtonModule,\r\n    MatButtonToggleModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatChipsModule,\r\n    MatCommonModule,\r\n    MatDatepickerModule,\r\n    MatDialogModule,\r\n    MatDividerModule,\r\n    MatExpansionModule,\r\n    MatFormFieldModule,\r\n    MatGridListModule,\r\n    MatIconModule,\r\n    MatInputModule,\r\n    MatLineModule,\r\n    MatListModule,\r\n    MatMenuModule,\r\n    MatNativeDateModule,\r\n    MatOptionModule,\r\n    MatPaginatorModule,\r\n    MatProgressBarModule,\r\n    MatProgressSpinnerModule,\r\n    MatPseudoCheckboxModule,\r\n    MatRadioModule,\r\n    MatRippleModule,\r\n    MatSelectModule,\r\n    MatSidenavModule,\r\n    MatSliderModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatSortModule,\r\n    MatStepperModule,\r\n    MatTableModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule \r\n  ],\r\n  providers: [GetInfoService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }","module.exports = \".h1\\r\\n{\\r\\n  color:wheat;\\r\\n  text-align: center;\\r\\n  font-family: Georgia, Helvetica, sans-serif;\\r\\n  font-weight: 900;\\r\\n  font-style: oblique;\\r\\n}\"","module.exports = \"<h1 class=\\\"h1\\\">Warning!! Man who built this app Knows very little about cooking</h1>\"","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-disclaimer',\r\n  templateUrl: './disclaimer.component.html',\r\n  styleUrls: ['./disclaimer.component.css']\r\n})\r\nexport class DisclaimerComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Recipe } from './post.model';\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class GetInfoService {\r\n  //variable for choosing corrct collection based on user input\r\n  choice: string;\r\n  //functions to change this\r\n  setChoiceSavory() {\r\n    this.choice = \"Savory\";\r\n  }\r\n  setChoiceSweet() {\r\n    this.choice = \"Sweet\";\r\n  }\r\n  //function for returning the current choice to user\r\n  getChoice(): string {\r\n    return this.choice;\r\n  }\r\n  constructor(private http: HttpClient) { }\r\n  //returns all documents from the database\r\n  getRecipes(choice: string): Observable<any> {\r\n    return this.http.get(\"http://46.101.213.83:8081/database/test/\" + choice);\r\n  }\r\n  //sends recipe to sever.js\r\n  addRecipe(Dish: string, Instructions: string, img: string, Ingredients: Array<string>, choice: string): Observable<any> {\r\n    const recipe: Recipe = { Dish: Dish, Instructions: Instructions, img: img, Ingredients: Ingredients };\r\n    return this.http.post(\"http://46.101.213.83:8081/database/test/\" + choice, recipe);\r\n  }\r\n  //send the id to the database of document you wish to delete to server js\r\n  deleteRecipe(id: string, choice: string): Observable<any> {\r\n    return this.http.delete(\"http://46.101.213.83:8081/database/delete/\" + choice + id);\r\n  }\r\n  //searches for a returns a document based on the dish name\r\n  searchRecipe(Dish: string, choice: string): Observable<any> {\r\n    return this.http.get(\"http://46.101.213.83:8081/database/search/\" + choice + Dish);\r\n  }\r\n  //sends id and new info to the server to find and updat a recipe\r\n  updateRecipe(id: string, Dish: string, Instructions: string, img: string, Ingredients: Array<string>, choice: string): Observable<any> {\r\n    const recipe: Recipe = { Dish: Dish, Instructions: Instructions, img: img, Ingredients: Ingredients };\r\n    return this.http.put(\"http://46.101.213.83:8081/database/update/\" + choice + id, recipe);\r\n  }\r\n}\r\n","module.exports = \".one\\r\\n{\\r\\n    border-radius: 12px;\\r\\n    padding: 20% 20%;\\r\\n    background-image: url('savoryButtonNew.jpg');\\r\\n    background-size: cover;\\r\\n    margin:5%;\\r\\n}\\r\\n.section\\r\\n{\\r\\n  color:wheat;\\r\\n  text-align: center;\\r\\n  font-family: Georgia, Helvetica, sans-serif;\\r\\n  font-weight: 900;\\r\\n  font-style: oblique;\\r\\n}\\r\\n.two\\r\\n{\\r\\n    border-radius: 12px;\\r\\n    padding: 20% 20%;\\r\\n    background-image: url('sweetButtonNew.jpg');\\r\\n    background-size: cover;\\r\\n    margin:5%;\\r\\n}\\r\\n.three\\r\\n{\\r\\n  margin: 25px;\\r\\n  margin-left: 35%;\\r\\n  margin-right: 35%;\\r\\n}\\r\\n.mat-card-avatar\\r\\n{\\r\\n  height: 100px;\\r\\n  width: 100px;\\r\\n}\"","module.exports = \"<div class=\\\"body\\\">\\r\\n    <div class=\\\"three\\\">\\r\\n        <button class=\\\"one\\\" mat-raised-button (click)=\\\"setChoiceSavory()\\\"></button>\\r\\n        <button class=\\\"two\\\" mat-raised-button (click)=\\\"setChoiceSweet()\\\"></button>\\r\\n    </div>\\r\\n    <h1 class=\\\"section\\\">{{choice}}</h1>\\r\\n    <mat-card *ngFor=\\\"let recipe of databaseInfo\\\">\\r\\n        <mat-card-header>\\r\\n            <img src=\\\"{{recipe.img}}\\\" mat-card-avatar>\\r\\n            <mat-card-title>\\r\\n                <h1>{{recipe.Dish}}</h1>\\r\\n            </mat-card-title>\\r\\n        </mat-card-header>\\r\\n        <br>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <h3>Ingredients</h3>\\r\\n        <ul *ngFor=\\\"let ingredient of recipe.Ingredients\\\">\\r\\n            <li>{{ingredient}}</li>\\r\\n        </ul>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <mat-divider></mat-divider>\\r\\n        <h3>Instructions</h3>\\r\\n        <h4>{{recipe.Instructions}}</h4>\\r\\n    </mat-card>\\r\\n    <br>\\r\\n    <br>\\r\\n    <p class=\\\"info-text mat-body-1\\\" *ngIf=\\\"databaseInfo.length <= 0\\\">No Recipes!</p>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { GetInfoService } from '../get-info.service';\r\nimport { Observable } from 'rxjs';\r\nimport { AppComponent } from '../app.component';\r\n@Component({\r\n  selector: 'app-index',\r\n  templateUrl: './index.component.html',\r\n  styleUrls: ['./index.component.css']\r\n})\r\nexport class IndexComponent implements OnInit {\r\n\r\n  constructor(private info: GetInfoService) { }\r\n  //variable for storing the coolection/choice\r\n  choice: string;\r\n  databaseInfo: any = [];\r\n  //set collection\r\n  setChoiceSavory() {\r\n    this.info.setChoiceSavory();\r\n    this.ngOnInit();\r\n  }\r\n  setChoiceSweet() {\r\n    this.info.setChoiceSweet();\r\n    this.ngOnInit();\r\n  }\r\n  //on loading the page stores all recipes in the database to an array databaseInfo\r\n  ngOnInit() {\r\n    //gets choice from service\r\n    this.choice = this.info.getChoice();\r\n    //gets info from correct collection from database to display\r\n    if (this.info.getChoice() == \"Savory\") {\r\n      this.info.getRecipes(this.info.getChoice()).subscribe(data => { this.databaseInfo = data; });\r\n    }\r\n    else if (this.info.getChoice() == \"Sweet\") {\r\n      this.info.getRecipes(this.info.getChoice()).subscribe(data => { this.databaseInfo = data; });\r\n    }\r\n  }\r\n}\r\n\r\n","module.exports = \".mat-list-item\\r\\n{\\r\\n    color:wheat;\\r\\n    font-family: Georgia, Helvetica, sans-serif;\\r\\n    font-weight: 900;\\r\\n    font-style: oblique;\\r\\n}\\r\\n.one\\r\\n{\\r\\n    border-radius: 12px;\\r\\n    padding: 20% 20%;\\r\\n    background-image: url('savoryButtonNew.jpg');\\r\\n    background-size: cover;\\r\\n    margin:5%;\\r\\n}\\r\\n.two\\r\\n{\\r\\n    border-radius: 12px;\\r\\n    padding: 20% 20%;\\r\\n    background-image: url('sweetButtonNew.jpg');\\r\\n    background-size: cover;\\r\\n    margin:5%;\\r\\n}\\r\\n.three\\r\\n{\\r\\n  margin: 25px;\\r\\n  margin-left: 35%;\\r\\n  margin-right: 35%;\\r\\n}\\r\\n.section\\r\\n{\\r\\n  color:wheat;\\r\\n  text-align: center;\\r\\n  font-family: Georgia, Helvetica, sans-serif;\\r\\n  font-weight: 900;\\r\\n  font-style: oblique;\\r\\n}\\r\\n.inputBoxSize\\r\\n{\\r\\n    height:250PX;\\r\\n}\\r\\n.inputBoxSizeTwo\\r\\n{\\r\\n    width:60%;\\r\\n}\\r\\n.size\\r\\n{\\r\\nheight: 200px;\\r\\nwidth: 60%;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"body\\\">\\r\\n  <div class=\\\"three\\\">\\r\\n    <button class=\\\"one\\\" mat-raised-button (click)=\\\"setChoiceSavory(postForm)\\\"></button>\\r\\n    <button class=\\\"two\\\" mat-raised-button (click)=\\\"setChoiceSweet(postForm)\\\"></button>\\r\\n  </div>\\r\\n  <h1 class=\\\"section\\\">{{choice}}</h1>\\r\\n  <form #postForm=\\\"ngForm\\\">\\r\\n    <mat-card>\\r\\n      <mat-list>\\r\\n        <mat-list-item>Dish</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"Dish\\\" ngModel required #Dish=\\\"ngModel\\\" required></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Instructions</mat-list-item>\\r\\n        <mat-form-field class=\\\"inputBoxSizeTwo\\\">\\r\\n          <textarea class=\\\"inputBoxSize\\\" matInput type=\\\"text\\\" name=\\\"Instructions\\\" ngModel required #Instructions=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Image URL</mat-list-item>\\r\\n        <mat-form-field class=\\\"inputBoxSizeTwo\\\">\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"img\\\" [(ngModel)]=\\\"displayimg\\\" ngModel required #img=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <p>\\r\\n          <img class=\\\"size\\\" *ngIf=\\\"displayimg\\\" src=\\\"{{displayimg}}\\\">\\r\\n        </p>\\r\\n      </mat-list>\\r\\n    </mat-card>\\r\\n    <br>\\r\\n    <mat-card>\\r\\n      <mat-list>\\r\\n        <mat-list-item>Ingredient 1</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"ingredientOne\\\" ngModel required #ingredientOne=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 2</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"ingredientTwo\\\" ngModel required #ingredientTwo=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 3</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"ingredientThree\\\" ngModel required #ingredientThree=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 4</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"ingredientFour\\\" ngModel required #ingredientFour=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n      </mat-list>\\r\\n      <br>\\r\\n      <br>\\r\\n      <button mat-raised-button (click)=\\\"addRecipe(postForm)\\\">Add Recipe</button>\\r\\n      <br>\\r\\n      <br>\\r\\n    </mat-card>\\r\\n  </form>\\r\\n  <br>\\r\\n  <br>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { GetInfoService } from '../get-info.service';\r\nimport { Observable } from 'rxjs';\r\nimport { NgForm } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-page-two',\r\n  templateUrl: './page-two.component.html',\r\n  styleUrls: ['./page-two.component.css']\r\n})\r\nexport class PageTwoComponent implements OnInit {\r\n\r\n  //used to store an array of ingredients to be sent to the service\r\n  ingredients: any = [];\r\n\r\n  constructor(private info: GetInfoService) { }\r\n\r\n  //grab the choice of collection from the service\r\n  choice: string;\r\n  displayimg:string;\r\n  ngOnInit() {\r\n    this.choice = this.info.getChoice();\r\n  }\r\n\r\n  //setting which choices you want\r\n  setChoiceSavory(postForm: NgForm) {\r\n    if (this.info.getChoice() == \"Sweet\") {\r\n      postForm.resetForm();\r\n    }\r\n    this.info.setChoiceSavory();\r\n    this.ngOnInit();\r\n  }\r\n  setChoiceSweet(postForm: NgForm) {\r\n    if (this.info.getChoice() == \"Savory\") {\r\n      postForm.resetForm();\r\n    }\r\n    this.info.setChoiceSweet();\r\n    this.ngOnInit();\r\n  }\r\n\r\n  addRecipe(postForm: NgForm) {\r\n    //wont add unless form filled correctly\r\n    if (!postForm.valid) {\r\n      return;\r\n    }\r\n    this.ingredients.push(postForm.value.ingredientOne);\r\n    this.ingredients.push(postForm.value.ingredientTwo);\r\n    this.ingredients.push(postForm.value.ingredientThree);\r\n    this.ingredients.push(postForm.value.ingredientFour);\r\n    this.info.addRecipe(postForm.value.Dish, postForm.value.Instructions, postForm.value.img, this.ingredients, this.info.getChoice()).subscribe();\r\n    postForm.resetForm();\r\n  }\r\n\r\n}\r\n\r\n","module.exports = \".mat-list-item\\r\\n{\\r\\ncolor: wheat;\\r\\nfont-family: Georgia, Helvetica, sans-serif;\\r\\nfont-weight: 900;\\r\\nfont-style: oblique;\\r\\n}\\r\\n.one\\r\\n{\\r\\nborder-radius: 12px;\\r\\npadding: 20% 20%;\\r\\nbackground-image: url('savoryButtonNew.jpg');\\r\\nbackground-size: cover;\\r\\nmargin:5%;\\r\\n}\\r\\n.two\\r\\n{\\r\\nborder-radius: 12px;\\r\\npadding: 20% 20%;\\r\\nbackground-image: url('sweetButtonNew.jpg');\\r\\nbackground-size: cover;\\r\\nmargin:5%;\\r\\n}\\r\\n.three\\r\\n{\\r\\nmargin: 25px;\\r\\nmargin-left: 35%;\\r\\nmargin-right: 35%;\\r\\n}\\r\\n.section\\r\\n{\\r\\ncolor:wheat;\\r\\ntext-align: center;\\r\\nfont-family: Georgia, Helvetica, sans-serif;\\r\\nfont-weight: 900;\\r\\nfont-style: oblique;\\r\\n}\\r\\n.inputBoxSize\\r\\n{\\r\\nheight:250PX;\\r\\n}\\r\\n.inputBoxSizeTwo\\r\\n{\\r\\nwidth:60%;\\r\\n}\\r\\n.size\\r\\n{\\r\\nheight: 200px;\\r\\nwidth: 60%;\\r\\n}\\r\\n.mat-card-avatar\\r\\n{\\r\\nheight: 100px;\\r\\nwidth: 100px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"body\\\">\\r\\n  <div class=\\\"three\\\">\\r\\n    <button class=\\\"one\\\" mat-raised-button (click)=\\\"setChoiceSavory()\\\"></button>\\r\\n    <button class=\\\"two\\\" mat-raised-button (click)=\\\"setChoiceSweet()\\\"></button>\\r\\n  </div>\\r\\n  <h1 class=\\\"section\\\">{{choice}}</h1>\\r\\n  <mat-card>\\r\\n    <form (submit)=\\\"search(searchWord)\\\" #searchWord=\\\"ngForm\\\">\\r\\n      <p>Search for a Recipe</p>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" name=\\\"dish\\\" ngModel required #dish=\\\"ngModel\\\">\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <h2>{{notFound}}</h2>\\r\\n      <button mat-raised-button type=\\\"submit\\\">Search</button>\\r\\n    </form>\\r\\n  </mat-card>\\r\\n  <mat-card *ngIf=\\\"recipe.Ingredients\\\">\\r\\n    <mat-card-header>\\r\\n      <img src=\\\"{{recipe.img}}\\\" mat-card-avatar>\\r\\n      <mat-card-title>\\r\\n        <h1>{{recipe.Dish}}</h1>\\r\\n      </mat-card-title>\\r\\n    </mat-card-header>\\r\\n    <ul *ngFor=\\\"let ingredient of recipe.Ingredients\\\">\\r\\n      <li>{{ingredient}}</li>\\r\\n    </ul>\\r\\n    <h2>Instructions</h2>\\r\\n    <h4>{{recipe.Instructions}}</h4>\\r\\n    <br>\\r\\n    <button mat-raised-button (click)=\\\"delete(recipe._id)\\\">Delete</button>\\r\\n    <button mat-raised-button (click)=\\\"displayEdit()\\\">Edit</button>\\r\\n  </mat-card>\\r\\n  <br>\\r\\n  <br>\\r\\n  <mat-card *ngIf=\\\"(bool%2)== 1\\\">\\r\\n    <form #postForm=\\\"ngForm\\\">\\r\\n      <p>Dish: </p>\\r\\n      <mat-form-field>\\r\\n        <input matInput type=\\\"text\\\" [(ngModel)]=\\\"recipe.Dish\\\" name=\\\"Dish\\\" ngModel required #Dish=\\\"ngModel\\\">\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <br>\\r\\n      <p>Instructions: </p>\\r\\n      <mat-form-field class=\\\"inputBoxSizeTwo\\\">\\r\\n        <textarea class=\\\"inputBoxSize\\\" matInput type=\\\"text\\\" [(ngModel)]=\\\"recipe.Instructions\\\" name=\\\"Instructions\\\" ngModel required\\r\\n          #Instructions=\\\"ngModel\\\"></textarea>\\r\\n      </mat-form-field>\\r\\n      <br>\\r\\n      <br>\\r\\n      <p>Add Img URL: </p>\\r\\n      <mat-form-field class=\\\"inputBoxSizeTwo\\\">\\r\\n        <textarea matInput type=\\\"text\\\" [(ngModel)]=\\\"recipe.img\\\" name=\\\"img\\\" ngModel required #img=\\\"ngModel\\\"></textarea>\\r\\n      </mat-form-field>\\r\\n      <p>\\r\\n        <img class=\\\"size\\\" *ngIf=\\\"recipe.img\\\" src=\\\"{{recipe.img}}\\\">\\r\\n      </p>\\r\\n      <br>\\r\\n      <br>\\r\\n      <mat-list>\\r\\n        <mat-list-item>Ingredient 1</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"One\\\" [(ngModel)]=\\\"recipe.Ingredients[0]\\\" ngModel required #One=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 2</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"Two\\\" [(ngModel)]=\\\"recipe.Ingredients[1]\\\" ngModel required #Two=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 3</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"Three\\\" [(ngModel)]=\\\"recipe.Ingredients[2]\\\" ngModel required #Three=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n        <br>\\r\\n        <mat-list-item>Ingredient 4</mat-list-item>\\r\\n        <mat-form-field>\\r\\n          <textarea matInput type=\\\"text\\\" name=\\\"Four\\\" [(ngModel)]=\\\"recipe.Ingredients[3]\\\" ngModel required #Four=\\\"ngModel\\\"></textarea>\\r\\n        </mat-form-field>\\r\\n      </mat-list>\\r\\n      <button mat-raised-button (click)=(updatePost(postForm)) align=\\\"center\\\">Edit Post</button>\\r\\n    </form>\\r\\n  </mat-card>\\r\\n  <br>\\r\\n  <br>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\r\nimport { GetInfoService } from '../get-info.service';\r\nimport { Observable } from 'rxjs';\r\nimport { NgForm } from \"@angular/forms\";\r\n@Component({\r\n  selector: 'app-search',\r\n  templateUrl: './search.component.html',\r\n  styleUrls: ['./search.component.css']\r\n})\r\nexport class SearchComponent implements OnInit {\r\n\r\n  constructor(private info: GetInfoService) { }\r\n\r\n  //variable to store object returned from search\r\n  recipe: any = [];\r\n  //variable for storing new ingredients to be sent to updat function in service\r\n  ingredients: any = [];\r\n  //variable for show edit\r\n  bool: number = 0;\r\n  //storing id to be sent back for delete/update\r\n  updateId: string;\r\n  //shared variable for showing which collection we are in\r\n  choice: string;\r\n  //variable for searching\r\n  notFound: string = \" \";\r\n  ngOnInit() {\r\n    this.choice = this.info.getChoice();\r\n  }\r\n\r\n  //buttons to switch between collections with logic for concurrent feel to web app\r\n  setChoiceSavory() {\r\n    if (this.info.getChoice() == \"Sweet\") {\r\n      this.recipe = [];\r\n      this.bool = 0;\r\n    }\r\n    this.info.setChoiceSavory();\r\n    this.ngOnInit();\r\n  }\r\n  setChoiceSweet() {\r\n    if (this.info.getChoice() == \"Savory\") {\r\n      this.recipe = [];\r\n      this.bool = 0;\r\n    }\r\n    this.info.setChoiceSweet();\r\n    this.ngOnInit();\r\n  }\r\n\r\n  search(searchWord: NgForm) {\r\n    //get data from database through searchPost->Service->server\r\n    //if theres nothing entered then return form the function\r\n    if (!searchWord.valid) {\r\n      return;\r\n    }\r\n    this.info.searchRecipe(searchWord.value.dish, this.info.getChoice()).subscribe(data => {\r\n      //client side logic for catching errors\r\n      if (data != null) {\r\n        this.recipe = data;\r\n        this.updateId = this.recipe._id;\r\n        this.notFound = \" \";\r\n      }\r\n      else {\r\n        this.notFound = \"Recipe not in Book!\";\r\n      }\r\n    });\r\n    searchWord.resetForm();\r\n    this.bool = 0;\r\n    this.ngOnInit();\r\n  }//end search function\r\n\r\n  delete(id) {\r\n    //go to delete Post -> service->send Post id to server to delete post from database\r\n    this.info.deleteRecipe(id, this.info.getChoice()).subscribe();\r\n    //clear Array\r\n    this.recipe = [];\r\n    //re-load Page\r\n    this.ngOnInit();\r\n  }\r\n\r\n  displayEdit() {\r\n    //everytime this is pressed the menu for editing opens up!\r\n    this.bool++;\r\n  }\r\n  updatePost(postForm: NgForm) {\r\n    //same logic as add recipe\r\n    if (!postForm.valid) {\r\n      return;\r\n    }\r\n    this.ingredients.push(postForm.value.One);\r\n    this.ingredients.push(postForm.value.Two);\r\n    this.ingredients.push(postForm.value.Three);\r\n    this.ingredients.push(postForm.value.Four);\r\n    this.info.updateRecipe(this.updateId, postForm.value.Dish, postForm.value.Instructions, postForm.value.img, this.ingredients, this.info.choice).subscribe();\r\n    //re-sets page for concurrency\r\n    this.bool++;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n\r\n"],"sourceRoot":""}